# Monitoramento Whoami com Prometheus Operator (MicroK8s)

# # 1. Deployment do Whoami
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: whoami
#   namespace: apps
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: whoami
#   template:
#     metadata:
#       labels:
#         app: whoami
#     spec:
#       containers:
#       - name: whoami
#         image: containous/whoami:latest
#         ports:
#         - containerPort: 80
#           name: http

# ---
# # 2. Service para o whoami
# apiVersion: v1
# kind: Service
# metadata:
#   name: whoami
#   namespace: apps
#   labels:
#     app: whoami
# spec:
#   selector:
#     app: whoami
#   ports:
#   - port: 80
#     targetPort: 80
#     name: http

---
# 3. Blackbox Exporter Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackbox-exporter
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blackbox-exporter
  template:
    metadata:
      labels:
        app: blackbox-exporter
    spec:
      containers:
      - name: blackbox-exporter
        image: prom/blackbox-exporter:v0.24.0
        ports:
        - containerPort: 9115
          name: http
        args:
        - --config.file=/config/blackbox.yml
        volumeMounts:
        - name: config
          mountPath: /config
        livenessProbe:
          httpGet:
            path: /health
            port: 9115
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9115
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: blackbox-exporter-config

---
# 4. Service para o Blackbox Exporter
apiVersion: v1
kind: Service
metadata:
  name: blackbox-exporter
  namespace: observability
  labels:
    app: blackbox-exporter
spec:
  selector:
    app: blackbox-exporter
  ports:
  - port: 9115
    targetPort: 9115
    name: http

---
# 5. ConfigMap do Blackbox Exporter
apiVersion: v1
kind: ConfigMap
metadata:
  name: blackbox-exporter-config
  namespace: observability
data:
  blackbox.yml: |
    modules:
      http_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          valid_status_codes: []
          method: GET
          preferred_ip_protocol: "ip4"
          follow_redirects: true
      http_post_2xx:
        prober: http
        timeout: 5s
        http:
          method: POST
          valid_status_codes: []

---
# 6. ServiceMonitor para o Blackbox Exporter monitorar o whoami
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: whoami-blackbox
  namespace: observability
  labels:
    app: whoami
spec:
  endpoints:
  - port: http
    interval: 30s
    scrapeTimeout: 10s
    path: /probe
    params:
      module: [http_2xx]
      target: [http://whoami.apps.svc.cluster.local]
    relabelings:
    - sourceLabels: [__param_target]
      targetLabel: instance
    - targetLabel: __address__
      replacement: blackbox-exporter.observability.svc.cluster.local:9115
    - sourceLabels: [__param_module]
      targetLabel: module
    - targetLabel: job
      replacement: whoami-probe
  jobLabel: app
  namespaceSelector:
    matchNames:
    - observability
  selector:
    matchLabels:
      app: blackbox-exporter

---
# 7. ServiceMonitor para o próprio Blackbox Exporter (métricas internas)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: blackbox-exporter
  namespace: observability
  labels:
    app: blackbox-exporter
spec:
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
  jobLabel: app
  namespaceSelector:
    matchNames:
    - observability
  selector:
    matchLabels:
      app: blackbox-exporter